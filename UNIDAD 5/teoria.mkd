PILARES DE POO
Los cuatro pilares de la programación orientada a objetos son:
● HERENCIA: las clases secundarias heredan datos y comportamientos de la clase
principal.
● ENCAPSULACIÓN: contener información en un objeto, exponiendo solo la información
seleccionada.
● ABSTRACCIÓN: exponer solo métodos públicos de alto nivel para acceder a un objeto.
● POLIFORMISMO: muchos métodos pueden realizar la misma tarea. Permite diseñar
objetos para compartir comportamientos.

========================================================================================

COMPONENTES FUNDAMENTALES EN POO
Los componentes fundamentales de un programa codificado con programación orientada a objetos son:
● Clases: son esencialmente tipos de datos definidos por el usuario. Las clases son donde creamos un
modelo para la estructura de métodos y atributos. Los objetos individuales se crean como instancias
a partir de las clases. Las clases contienen campos para atributos y métodos para comportamientos.
● Objetos: son instancias de una clase creada con datos específicos.
● Métodos: representan comportamientos. Los métodos realizan acciones y pueden devolver
información sobre un objeto o actualizar los datos de un objeto. El código del método se define en la
definición de clase.
● Atributos: son la información que se almacena. Los atributos se definen en la plantilla Clase. Cuando
se crean instancias de objetos, los objetos individuales contienen datos almacenados en el campo
Atributos. El estado de un objeto está definido por los datos en los campos de atributos del objeto.

================================================================================================

ABSTRACCIÓN
En términos simples, la abstracción consiste en representar una entidad compleja
mediante sus características más relevantes y ocultando los detalles innecesarios.
Es como si crearamos una versión simplificada de algo, manteniendo sólo lo que
necesitamos para interactuar con él. De esta forma, podemos tratar con objetos de
manera más intuitiva y eficiente.

=================================================================================================

ENCAPSULACIÓN
La encapsulación se encarga de mantener ocultos los procesos internos, dándole al
programador acceso sólo a lo necesario, sólo tienes acceso a unos métodos ya definidos.
La encapsulación brinda dos ventajas:
● Las acciones del usuario pueden ser controladas internamente.
● Poder realizar cambios/mejoras sin que esto afecte el modo en que los usuarios
interactúan con la aplicación. Solo hay que mantener igual la forma de acceder al método.

======================================================================================================

GETTERS Y SETTERS
● Getter: Su función es permitir el obtener el valor de una propiedad de la clase y así
poder utilizar dicho valor en diferentes métodos.
● Setter: Su función permite brindar acceso a propiedades específicas para poder
asignar un valor fuera de la clase.

===========================================================================================================

ATRIBUTOS Y MÉTODOS ESTÁTICOS
Por definición, los atributos y métodos estáticos no actúan en nombre de un
objeto sino directamente en nombre de una clase.

=============================================================================================================

SINGLETON
Es un patrón de diseño creacional que garantiza que tan solo exista un objeto de su tipo y proporciona
 un único punto de acceso a él para cualquier otro código.

================================================================================================================

MÉTODOS MÁGICOS
Los métodos mágicos son métodos especiales que sobreescriben acciones por defecto cuando se realizan ciertas
 acciones sobre un objeto.
Todos los métodos mágicos, a excepción de __construct(), __destruct(), y __clone(), deben ser declarados como públicos.

===================================================================================================================

HERENCIA
Las clases, propiedades y métodos se definen mediante los modificadores public, protected, private, final o abstract
 seguido de una declaración de variable normal:
● Public: la propiedad o método podrá usarse en cualquier parte del script 
● Private: la propiedad o método sólo podrá usarse en la clase a la que pertenece
● Protected: la propiedad o método se podrá usar por la clase a la que pertenece y por sus descendientes.
● Final: la clase o método no puede ser sobreescrito en clases descendientes.
● Abstract: la clase o método no puede ser usado directamente, ha de ser heredado primero para usarse.

======================================================================================================================

INTERFACES
Establece un contrato o un conjunto de métodos que una clase concreta debe implementar.
Requieren que cualquier clase que las utilice implemente los métodos definidos en ellas (y los mismos tipos de argumentos
 de los métodos), de lo contrario dará un error fatal.
Brindan un mecanismo para la abstracción, lo que permite definir funcionalidades que varias clases pueden implementar de
 diferentes maneras.
Pueden emplearse más de una interface en cada clase, y pueden extenderse entre ellas mediante extends.
Una interface puede extender una o más interfaces.
Todos los métodos declarados en una interface deben ser públicos.
Para definir una interface se utiliza la palabra interface, y para extenderla se utiliza implements.

=======================================================================================================================

CLASES ABSTRACTAS
● Las clases abstractas son clases que no se instancian y sólo pueden ser heredadas,
trasladando así un funcionamiento obligatorio a clases hijas. Mejoran la calidad del
código y ayudan a reducir la cantidad de código duplicado.
● Es una clase que no se puede instanciar directamente. Se utiliza como una base
para otras clases, proporcionando una estructura común y definiendo métodos
que pueden ser implementados (o deben ser implementados) por las clases hijas.
Una clase abstracta se define usando la palabra clave abstract.
● Pueden contener métodos abstractos y concretos:
○ Los métodos abstractos no tienen cuerpo; solo se declaran y deben ser implementados por las clases
hijas.
○ Los métodos concretos tienen implementación y pueden ser heredados.
● Pueden tener propiedades y métodos comunes a las clases hijas.
● Pueden incluir un constructor.
● Se pueden utilizar con otros mecanismos como herencia y polimorfismo.
● Los métodos abstractos de una clase abstracta deben ser implementados
obligatoriamente en sus clases hijas, salvo que la clase hija también sea declarada
como abstracta. Esto se debe a que los métodos abstractos no tienen
implementación en la clase padre, por lo que es responsabilidad de las clases hijas
definir su comportamiento.

===============================================================================================================================

TRAITS
● Los traits son un mecanismo de reutilización de código en lenguajes que tienen herencia
simple, como PHP.
● El objetivo de los traits es reducir las limitaciones de la herencia simple permitiendo
reutilizar métodos en varias clases independientes y de distintas jerarquías.
● Un trait es similar a una clase, pero su objetivo es agrupar funcionalidades específicas.
● Un trait, al igual que las clases abstractas, no se puede instanciar, simplemente facilita
comportamientos a las clases sin necesidad de usar la herencia.
● La sintaxis para crear un Trait es diferente a la sintaxis que utilizamos para crear las clases, el
motivo es que debemos hacer uso de la palabra reservada Trait en lugar de class.
● Utilizar traits dentro de otros traits es frecuente cuando la aplicación crece y
hay numerosos traits que pueden agruparse para tener que incluir menos en
una clase.
● Eso hace que pueda haber métodos con el mismo nombre en diferentes traits o en la misma clase,
 por lo que tiene que haber un orden. Existe un orden de precedencia de los métodos disponibles
  en una clase respecto a los de los traits:
● Métodos de un trait sobreescriben métodos heredados de una clase padre
● Métodos definidos en la clase actual sobreescriben a los métodos de un trait